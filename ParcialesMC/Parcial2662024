

/* semaforos */

sem mutex = 1;
sem espera[20] = ([20] 0);
sem verificacion = 0;
Cola c;
Process Empleado{
    int idAux;
    while(true){
        P(verificacion);
        p(mutex);
        idAux = pop(c);
        V(mutex);
        verificar(idAux);
        V(espera[idAux]);
    }
    
}

Process Vehiculo[1..20]{
    
    int idVehiculo;
    while (true){
        P(mutex);
        push(c, idVehiculo);
        V(mutex);
        V(verificacion);
        P(espera[idVehiculo]);
    }
    
}

/* monitores: Resolver con MONITORES el siguiente problema.
En una oficina hay un empleado para atender solicitudes de N personas que vienen a realizar un trámite, en orden de llegada. Cada persona espera a que el empleado atienda su trámite y le dé el resultado. Cuando el empleado está libre atiende el siguiente pedido pendiente, y si no hay ninguno lee un libro por 10 minutos.
Nota: existe la función resolverTramite(solicitud) que simula que el empleado está resolviendo el trámite de una persona; todos los procesos deben terminar. */

Process Persona[id: 1..N]{
    Oficina.solicitarTramite(id, sol);
    Oficina.esperarResultado(id, res);
}

Process Empleado{
    Oficina.atenderProximo(sol, res);
}

Monitor Oficina{
    Cola Csolicitudes, CTramites;
    cond resultadoListo;
    cond esperando[N];
    Resultado res;
    Solicitud sol;
    bool libre = true;

    Process solicitarTramite(id: in int, sol: in Solicitud){
        push(Csolicitudes, id);
        signal(esperando[id]);
        wait(resultadoListo);
        return res;
    }

    Process atenderProximo(sol: in Solicitud, res: out Resultado){
        int idAux;
        while(true){
            if(!Csolicitudes.empty()){
                libre = false;
                Csolicitudes.pop(sol,idAux);
                wait(esperando[idAux]);
                res = resolverTramite(sol);
                CTramites.push(res,idAux);
                signal(resultadoListo);
            }
            else{
                libre = true;
                signal(resultadoListo);
                delay(10);
            }
        }
    }

    Process esperarResultado(id: in int, res: out Resultado){
        while(libre || CTramites.empty() || CTramites.front().id != id){
            wait(esperando[id]);
        }
        CTramites.pop(res,id);
    }
}