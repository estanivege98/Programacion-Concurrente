#En una empresa de logística de paquetes existe una sala de contenedores donde se preparan las entregas. Cada contenedor puede almacenar un paquete y la sala cuenta con capacidad para N contenedores. Resuelva considerando las siguientes situaciones:

#a) La empresa cuenta con 2 empleados: un empleado Preparador que se ocupa de preparar los paquetes y dejarlos en los contenedores; un empelado Entregador que se ocupa de tomar los paquetes de los contenedores y realizar la entregas. Tanto el Preparador como el Entregador trabajan de a un paquete por vez.

#b) Modifique la solución a) para el caso en que haya P empleados Preparadores.

#c) Modifique la solución a) para el caso en que haya E empleados Entregadores.

#d) Modifique la solución a) para el caso en que haya P empleados Preparadores y E empleadores Entregadores.

# Inciso a
typeP buf[N];
sem vacio = 0;
int libre = 0;
int ocupado = 0;
sem lleno = 0;

Process Preparador{
    Paquete pa;
    while(true){
        pa = generarPaquete();
        P(vacio) buf[libre] = pa, libre += 1 mod n, v(lleno);
    }
}

Process Entregador{
    while(true){
        P(lleno);
        result = buff[ocupado], ocupado += 1 mod n, v(vacio);
        entregarResultado();
    }
}

# Inciso b
typeP buf[N];
sem vacio = 0;
int libre = 0;
int ocupado = 0;
sem lleno = 0;
sem mutex = 1;

Process Preparador[0..P-1]{
    Paquete pa;
    while(true){
        pa = generarPaquete();
        P(mutex)
        P(vacio) buf[libre] = pa, libre += 1 mod n, V(lleno);
        V(mutex)
    }
}

Process Entregador{
    while(true){
        P(lleno);
        result = buff[ocupado], ocupado += 1 mod n, V(vacio);
        entregarResultado();
    }
}


# Inciso C
typeP buf[N];
sem vacio = 0;
int libre = 0;
int ocupado = 0;
sem lleno = 0;
sem mutex = 1;

Process Preparador{
    Paquete pa;
    while(true){
        pa = generarPaquete();
        P(vacio) buf[libre] = pa, libre += 1 mod n, V(lleno);
    }
}

Process Entregador[0..E-1]{
    while(true){
        P(lleno);
        P(mutex);
        result = buff[ocupado], ocupado += 1 mod n, V(vacio);
        V(mutex);
        entregarResultado();
    }
}

# Inciso D
typeP buf[N];
sem vacio = 0;
int libre = 0;
int ocupado = 0;
sem lleno = 0;
sem mutex = 1;

Process Preparador[0..P-1]{
    Paquete pa;
    while(true){
        pa = generarPaquete();
        P(mutex)
        P(vacio) buf[libre] = pa, libre += 1 mod n, V(lleno);
        V(mutex)
    }
}

Process Entregador[0..E-1]{
    while(true){
        P(lleno);
        P(mutex);
        result = buff[ocupado], ocupado += 1 mod n, V(vacio);
        V(mutex);
        entregarResultado();
    }
}