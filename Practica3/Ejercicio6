#Existe una comisión de 50 alumnos que deben realizar tareas de a pares, las cuales son
#corregidas por un JTP. Cuando los alumnos llegan, forman una fila. Una vez que están todos
#en fila, el JTP les asigna un número de grupo a cada uno. Para ello, suponga que existe una
#función AsignarNroGrupo() que retorna un número “aleatorio” del 1 al 25. Cuando un alumno
#ha recibido su número de grupo, comienza a realizar su tarea. Al terminarla, el alumno le avisa
#al JTP y espera por su nota. Cuando los dos alumnos del grupo completaron la tarea, el JTP
#les asigna un puntaje (el primer grupo en terminar tendrá como nota 25, el segundo 24, y así
#sucesivamente hasta el último que tendrá nota 1). Nota: el JTP no guarda el número de grupo
#que le asigna a cada alumno.

Process Alumno[id: 1..50]{
    int nroGrupo;
    int nota;

    Tarea.esperarFila(id);
    Tarea.obtenerGrupo(id, nroGrupo);
    realizarTarea();
    Tarea.obtenerNota(nroGrupo, nota);

}

Process JTP{
    int i, nroGrupo;
    int vecContadorGrupos[25] = [(25) 0];
    int nota = 25;
    Tarea.esperarAlumnos();
    for i: 1..50 {
        Tarea.asignarTemas(AsignarNroGrupo());
    }
    for i: 1..50 {
        Tarea.corregirTarea(nroGrupo);
        vecContadorGrupos[nroGrupo]++;
        if(vecContadorGrupos[nroGrupo] == 2) {
            Tarea.asignarNota(nroGrupo, nota);
            nota--;
        }
    }
}

Monitor Tarea {
    Cola espera, esperaNota;
    int alumnosEsperando = 0;
    int vecGrupo[50]; // índice: id del alumno, valor: nro de grupo
    int vecNotas[25]; // índice: nro de grupo, valor: nota
    cond espera[50]; // un cond por alumno
    cond esperaNotas[50]; // un cond por grupo
    cond corrige;

    Procedure esperarFila(id: in int) {
        alumnosEsperando++;
        espera.Push(id);
        if (alumnosEsperando == 50) {
            signal(esperaAsignar);
        }
    }

    Procedure esperarAlumnos() {
        if (alumnosEsperando < 50) {
            wait(esperaAsignar);
        }
    }

    Procedure obtenerGrupo(id: in int, nroGrupo: out int) {
        wait (espera[id]);
        nroGrupo = vecGrupo[id];
    }

    Procedure asignarTemas(nroGrupo: in int) {
        int id = espera.Pop();
        vecGrupo[id] = nroGrupo;
        signal(espera[id]);
    }

    Procedure corregirTarea(nroGrupo: out int){
        if(esperaNotas.isEmpty()) {
            wait(corrige);
        }
        int id = esperaNotas.Pop();
        nroGrupo = vecGrupo[id];
    }

    Procedure obtenerNota(nroGrupo: in int, nota: in int) {
        vecNotas[nroGrupo] = nota;
        signal_all(esperaNotas[nroGrupo]);
    }

    Procedure asignarNota(nroGrupo: in int, nota: out int) {
        esperaNotas.Push(nroGrupo);
        signal(corrige);
        wait(esperaNotas[nroGrupo]);
        nota = vecNotas[nroGrupo];
    }


}