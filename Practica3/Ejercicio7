/* Se debe simular una maratón con C corredores 
donde en la llegada hay UNA máquina expendedoras de agua con capacidad para 20 botellas. 
Además, existe un repositor encargado de reponer las botellas de la máquina. 
Cuando los C corredores han llegado al inicio comienza la carrera. 
Cuando un corredor termina la carrera se dirigen a la máquina expendedora, espera su turno (respetando el orden de llegada), saca una botella y se retira. 
Si encuentra la máquina sin botellas, le avisa al repositor para que cargue nuevamente la máquina con 20 botellas; espera a que se haga la recarga; 
saca una botella y se retira. Nota: mientras se reponen las botellas se debe permitir que otros corredores se encolen.*/

Process Corredor[id: 1..C] {
    Carrera.esperarInicio();
    //corre
    //finaliza carrera
    Fila.accederMaquina();
    Maquina.usar();
    Fila.salirMaquina();
}

Process Repositor {
    while (true) {
        Maquina.reponer();
    }
}

Monitor Carrera {
    int corredoresEsperando = 0;
    int esperandoMaquina = 0;
    cond cola, inicioCarrera;
    bool libre = true;

    Procedure esperarInicio() {
        corredoresEsperando++;
        if (corredoresEsperando == C) {
            signal_all(inicioCarrera);
        } else {
            wait(inicioCarrera);
        }
    }
 
}

Monitor Fila {
    Procedure accederMaquina() {
        if (!libre) {
            esperandoMaquina++;
            wait(cola);
        }
        else libre = false;
    }

    Procedure salirMaquina() {
        if (esperandoMaquina > 0) {
            esperandoMaquina--;
            signal(cola);
        } else {
            libre = true;   
        }
    }
}

Monitor Maquina {
    int botellas = 20;
    cond faltaBotellas, puedeUsar;

    Procedure usar() {
        if (botellas == 0) {
            signal(faltaBotellas);
            wait(puedeUsar);
        }
        botellas--;
    }

    Procedure reponer() {
        if (botellas > 0) {
            wait(faltaBotellas);
        }
        //reponer 20 botellas
        botellas++;
        signal(puedeUsar);
    }
}