/* En un examen de la secundaria hay un preceptor y una profesora que deben tomar un examen escrito a 45 alumnos. 
El preceptor se encarga de darle el enunciado del examen a los alumnos cuando los 45 han llegado (es el mismo enunciado para todos). 
La profesora se encarga de ir corrigiendo los exámenes de acuerdo con el orden en que los alumnos van entregando. 
Cada alumno al llegar espera a que le den el enunciado, resuelve el examen, y al terminar lo deja para que la profesora lo corrija 
y le envíe la nota. Nota: maximizar la concurrencia; todos los procesos deben terminar su ejecución; suponga que la profesora tiene una función
corregirExamen que recibe un examen y devuelve un entero con la nota.*/

Process Alumno[id: 1..45]{
    int nota;
    text examen;

    Aula.llegada(examen);
    //realizar examen
    Aula.entregarExamen(id, examen, nota);
}

Process Profesora{
    int i, idAlumno, nota;
    text examen;
    for i: 1..45 do{
        Aula.recibirExamen(idAlumno, examen);
        nota = corregirExamen(examen);
        Aula.enviarNota(idAlumno, nota);
    }
}

Process Preceptor{
    text examen;
    //preparar examen
    Aula.darEnunciado(examen);
}

Monitor Aula {
    int cantAlumnos = 0, notas[45];
    text examen;
    cola C;
    cond esperarExamen, esperarPreceptor, esperarProfesora, esperandoNota;

    Process llegada(E: out text){
        cantAlumnos++;
        if(cantAlumnos == 45) signal(esperarPreceptor);
        wait(esperarExamen);
        E = examen;
    }
    Process darEnunciado(E: in text){
        if(cantAlumnos < 45) wait(esperarPreceptor);
        examen = E;
        signal_all(esperarExamen);
    }
    Process entregarExamen(id: in int, E: in text, N: out int){
        C.push(id, E);
        signal(esperarProfesora);
        wait(esperandoNota);
        N = notas[id];
    }
    Process recibirExamen(id: out int, E: out text){
        if(C.empty()) wait(esperarProfesora);
        (id, E) = C.pop();
    }
    Process enviarNota(id: in int, N: in int){
        notas[id] = N;
        signal(esperandoNota);
    }
}