/* Se desea modelar el funcionamiento de un banco en el cual existen 5 cajas para realizar pagos. 
Existen P clientes que desean hacer un pago. Para esto, cada una selecciona la caja donde hay menos personas esperando; 
una vez seleccionada, espera a ser atendido. En cada caja, los clientes son atendidos por orden de llegada por los cajeros. 
Luego del pago, se les entrega un comprobante. Nota: maximizando la concurrencia.*/

chan pedido[5]; 
chan comprobante[P](text);
chan buscarCaja(int); // Cliente pide caja con menos gente
chan obtenerCaja(int);
chan liberarCaja(int);
chan hayPedido(int);

Process Caja[id: 0..4]{
    int idAux;
    text pago;
    text comprobante;
    while(true){
        receive pedido[id](pago, idAux);
        generarComprobante(pago, comprobante);
        send comprobante[idAux](comprobante);
    }
}

Process Cliente[id: 0..P-1]{
    int idCaja;
    text pago;
    text comprobante;

    send buscarCaja(id);
    send hayPedido(true);
    receive obtenerCaja[id](idCaja);
    send pedido[idCaja](pago, id);
    receive comprobante[id](comprobante);
    send liberarCaja(idCaja);
    send hayPedido(false);
}

Process Admin{
    int cantEsperando[5] = ([5] 0);
    int idAux; 
    int min;
    bool hayPedido; // Indica si hay clientes esperando

    while (true){
        receive hayPedido(hayPedido);
        if(!empty(buscarCaja) && empty(liberarCaja)){
            receive buscarCaja(idAux);
            if(hayPedido){
                min = 0;
                for(int i=1; i<5; i++){
                    if(cantEsperando[i] < cantEsperando[min]){
                        min = i;
                    }
                }
                cantEsperando[min]++;
                send obtenerCaja[idAux](min);
            } else {
                send obtenerCaja[idAux](-1); // No hay cajas disponibles
            }
        }
    }
}