/* Se debe modelar el funcionamiento de una casa de comida rápida, en la cual trabajan 2
cocineros y 3 vendedores, y que debe atender a C clientes. El modelado debe considerar
que:
- Cada cliente realiza un pedido y luego espera a que se lo entreguen.
- Los pedidos que hacen los clientes son tomados por cualquiera de los vendedores y se
lo pasan a los cocineros para que realicen el plato. Cuando no hay pedidos para atender,
los vendedores aprovechan para reponer un pack de bebidas de la heladera (tardan entre
1 y 3 minutos para hacer esto).
- Repetidamente cada cocinero toma un pedido pendiente dejado por los vendedores, lo
cocina y se lo entrega directamente al cliente correspondiente.
Nota: maximizar la concurrencia.*/

chan realizarPedido[C](text, int); // Cliente hace pedido
chan obtenerPlato[C](text);
chan obtenerPedido(int, text, int); // Vendedor obtiene pedido de cliente
chan pedidoListo[3](int, text, int); // Cocinero entrega plato al cliente
chan pedidosPendientes(text, int); // Vendedor pasa pedido a cocinero

Process Cliente[id: 0..C-1]() {
    text pedido;
    text plato;

    send realizarPedido(pedido, id);
    receive obtenerPlato[id](plato);
}

Process Coordinador(){
    text pedido;
    int idCliente;
    int idVendedor;

    while(true){
        send obtenerPedido(id);
        if(empty (realizarPedido)){
            idCliente = -1;
            pedido:="";
        }
        else{
            receive realizarPedido(pedido, idCliente);
        }
        send pedidoListo[idVendedor](pedido, idCliente);
    }
}

Process Vendedor[id: 0..2]() {
    text pedido;
    int idCliente;
    int idCocinero;

    while(true){
        send obtenerPedido(id);
        receive pedidoListo[id](pedido, idCliente);
        if(pedido == ""){
            // Reponer pack de bebidas
            delay(random(1,3)*60);
        }
        else{
            send pedidosPendientes(pedido, idCliente);
        }
    }
}

Process Cocinero[id: 0..1]() {
    text pedido;
    text plato;
    int idCliente;

    while(true){
        receive pedidosPendientes(pedido, idCliente);
        // Cocinar el plato
        delay(random(5,10)*60); // Tiempo de cocción entre 5 y 10 minutos
        send obtenerPlato[idCliente](pedido);
    }
}