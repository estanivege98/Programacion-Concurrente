/*Implemente una solución para el siguiente problema. 
Se debe simular el uso de una máquina expendedora de gaseosas con capacidad para 100 latas por parte de U usuarios. 
Además, existe un repositor encargado de reponer las latas de la máquina. Los usuarios usan la máquina según el orden de llegada. 
Cuando les toca usarla, sacan una lata y luego se retiran. 
En el caso de que la máquina se quede sin latas, entonces le debe avisar al repositor para que cargue nuevamente la máquina en forma completa. 
Luego de la recarga, saca una botella y se retira. Nota: maximizar la concurrencia; 
mientras se reponen las latas se debe permitir que otros usuarios puedan agregarse a la fila. */

sem mutex = 1;
sem reponer = 0;
sem hayLatas = 0;
sem espera[U] = ([U], 0);
Cola c;
int latas = 100;
bool libre = true;

Process Usuario[id: 1..U]{
    int pos;
    P(mutex);
    if(!libre){
        c.push(id);
        V(mutex);
        P(espera[id]);
    }
    else{
        libre = false;
        V(mutex);
    }
    if(latas == 0){
        V(reponer); // avisar al repositor
        P(hayLatas); // esperar a que reponga
    }
    latas--;
    if(c.empty()){
        P(mutex);
        libre = true;
        V(mutex);
    }
    else{
        c.pop(pos);
        V(espera[pos]);
    }
    V(mutex);
}

Process Repositor{
    while(true){
        P(reponer);
        latas = 100;
        V(hayLatas);
    }
}
